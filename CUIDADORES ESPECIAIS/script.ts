// ==============================================
// 1. INTERFACES - NOSSAS "FICHAS DE CADASTRO"
// ==============================================


// 1.1 INTERFACE PARA ANIMAIS - FICHA OBRIGAT√ìRIA
interface Animal {
    id: number;           //N√∫mero √∫nico para identificar cada animal
    nome: string;         //Nome do animal - deve ser texto
    especie: string;      //Tipo: "cachorro", "gato", "p√°ssaro", etc
    idade: number;        //Idade em anos - deve ser n√∫mero
    peso: number;         //Peso em kg - deve ser n√∫mero  
    vacinado: boolean;    //true = j√° vacinado, false = n√£o vacinado
}
// EXPLICA√á√ÉO: Esta interface √© como um FORMUL√ÅRIO que TODO animal deve preencher!
// 1.2 INTERFACE PARA SERVI√áOS - O QUE NOSSO PETSHOP OFERECE
interface Servico {
    id: number;           //N√∫mero √∫nico para cada servi√ßos
    tipo: string;         //Tipo de servi√ßos: "banho", "tosa", "consulta", etc
    animalId: number;     //ID do animal que vai receber o servi√ßos
    preco: number;        //Pre√ßo em reais - deve ser n√∫mero
    concluido: boolean;   //true = servi√ßos feitos, false = ainda n√£o feitos
}
// OP√á√ÉO A: ADICIONEM √Ä INTERFACE ANIMAL (ESCOLHAM 1-2):
    cor: string;                    //Cor do animal: "preto", "branco", "marrom"
    ra√ßa: string;                   //Ra√ßa: "vira-lata", "siam√™s", "poodle"
    dono: string;                   //Nome do dono do animal
    ultimaVisita: string;           //Data da √∫ltima visita: "15/03/2024"
    castrado: boolean;              //true = castrado, false = n√£o castrado
    observacoes: string;            //Observa√ß√µes especiais sobre o animal

// OP√á√ÉO B: ADICIONEM √Ä INTERFACE SERVI√áO (ESCOLHAM 1-2):

    data: string;                   //Data do servi√ßo: "20/03/2024"
    horario: string;                //Hor√°rio: "14:30", "09:00"
    funcionario: string;            //Nome do funcion√°rio respons√°vel
    duracao: number;                //Dura√ß√£o em minutos: 30, 60, 90
    urgente: boolean;               //true = servi√ßo urgente, false = normal
    observacoes: string;            //Observa√ß√µes sobre o servi√ßo
    // ‚ùå ERRO: Esquecer de preencher TODOS os campos
// const animalErrado: Animal = { nome: "Rex", idade: 3 };
// ‚úÖ SOLU√á√ÉO: Preencher TODOS os campos obrigat√≥rios
const animalCorreto: Animal = {
    id: 1,
    nome: "Rex",
    especie: "cachorro",
    idade: 3,
    peso: 15.5,
    vacinado: true
};
// ==============================================
// 2. LISTAS - ONDE GUARDAMOS NOSSOS DADOS
// ==============================================

// 2.1 LISTA DE ANIMAIS CADASTRADOS
let animais: Animal[] = [];
// EXPLICA√á√ÉO: Esta array (lista) vai guardar TODOS os animais do petshop!
// 2.2 LISTA DE SERVI√áOS AGENDADOS  
let servicos: Servico[ ] = [ ];
// EXPLICA√á√ÉO: Esta array vai guardar TODOS os servi√ßos marcados!
// OP√á√ÉO C: LISTAS EXTRAS (ESCOLHAM 1):
let funcionarios: string[] = [];           // Lista de funcion√°rios
let produtos: string[] = [];               //Lista de produtos √† venda
let clientes: string[] = [];               //Lista de nomes dos clientes
let tiposServico: string[] = [];           //Lista de tipos de servi√ßos
// ==============================================
// 3. FUN√á√ïES PRINCIPAIS - O "MOTOR" DO SISTEMA
// ==============================================
// 3.1 FUN√á√ÉO PARA CALCULAR IDADE DO ANIMAL
function calcularIdade(anoNascimento: number): number {
    const anoAtual: number = 2024;        //Definimos o ano atual
    return anoAtual - anoNascimento;    //C√°lculo: ano atual - nascimento
}
// EXPLICA√á√ÉO: Esta fun√ß√£o RESOLVE o problema de confundir idades!
// 3.2 FUN√á√ÉO PARA CRIAR UM NOVO ANIMAL
function criarAnimal(nome: string, especie: string, idade: number, peso: number): Animal {
    return {
        id: Math.floor(Math.random() * 1000), //Gera ID aleat√≥rio de 0 a 999
        nome: nome,  //Usa o nome recebido
        especie: especie,   //Usa a esp√©cie recebida  
        idade: idade,   //Usa a idade recebida
        peso: peso, //Usa o peso recebido
        vacinado: false //SEMPRE come√ßa n√£o vacinado
    };
}
// EXPLICA√á√ÉO: Esta fun√ß√£o garante que todo animal tenha todos os dados!
// 3.3 FUN√á√ÉO PARA AGENDAR SERVI√áOS
function agendarServico(servico: Servico): string {
    servico.push(servico);    //Adiciona o servi√ßos na lista
    return `‚úÖ Servico de ${servico.tipo} agendado! Preco: R$ ${servico.preco}`;
}
//  EXPLICA√á√ÉO: Esta fun√ß√£o organiza todos os servi√ßos!
// OP√á√ÉO D: FUN√á√ïES EXTRAS (ESCOLHAM 1-2):
// FUN√á√ÉO para calcular pre√ßo total de servi√ßos
function calcularPrecoTotal(): number {
    let total: number = 0;
    servico.forEach(servico => {
        total += servico.preco;   //Soma todos os pre√ßos
    });
    return total;
}
//FUN√á√ÉO para encontrar animais vacinados
function filtrarAnimaisVacinados(): Animal[] {
    return animais.filter(animal => animal.vacinado === true);
    // filter = cria nova lista s√≥ com animais vacinados
}
// FUN√á√ÉO para marcar animal como vacinado
function marcarComoVacinado(idAnimal: number): void {
    const animal = animais.find(a => a.id === idAnimal);
    if (animal) {
        animal.vacinado = true;     //Muda para vacinado
    }
}
//FUN√á√ÉO para buscar animal pelo nome
function buscarAnimalPorNome(nome: string): Animal | undefined {
    return animais.find(animal => animal.nome.toLowerCase() === nome.toLowerCase());
    //find = procura animal com nome igual (ignorando mai√∫sculas/min√∫sculas)
}
// ‚ùå ERRO: Passar tipo errado para fun√ß√£o
// calcularIdade("2020"); // ERRO! Espera n√∫mero, recebeu texto
// ‚úÖ SOLU√á√ÉO: Passar o tipo correto
calcularIdade(2020); // CERTO! N√∫mero

// ‚ùå ERRO: Esquecer de retornar o tipo certo
// function criarAnimal(): Animal { return "animal"; } // ERRO!
// ‚úÖ SOLU√á√ÉO: Retornar o tipo correto
function criarAnimal(): Animal { 
    return { id: 1, nome: "Rex", especie: "cachorro", idade: 3, peso: 10, vacinado: false };
}
// ==============================================
// 4. FUN√á√ïES DOS BOT√ïES - CONECTAM COM O HTML
// ==============================================
// BOT√ÉO 1: MOSTRAR TIPOS B√ÅSICOS DO TYPESCRIPT
function mostrarTipos(): void {
    const resultado = document.getElementById('resultado'); //Encontra a √°rea de resultados
    if (!resultado) return;  // Se n√£o encontrar, para aqui
       resultado.innerHTML = ` // Altera o HTML da √°rea
        <div class="animal-card">
            <h3>üìù Tipos do TypeScript</h3>
            <p><strong>string:</strong> para textos ‚Üí "Rex", "gato"</p>
            <p><strong>number:</strong> para numeros ‚Üí 5, 15.5, 2024</p>
            <p><strong>boolean:</strong> para verdadeiro/falso ‚Üí true, false</p>
            <p><strong>string[]:</strong> para listas de texto ‚Üí ["banho", "tosa"]</p>
            <small>‚ú® O TypeScript n√£o deixa misturar tipos!</small>
        </div>
    `;
}
// EXPLICA√á√ÉO: Mostra os 4 tipos principais que usamos!
// BOT√ÉO 2: MOSTRAR EXEMPLOS DE ANIMAIS
function mostrarAnimais(): void {
    const resultado = document.getElementById('resultado');
    if (!resultado) return;
    // CRIEM 2 ANIMAIS DO SEU PETSHOP AQUI!
    const animal1: Animal = {
        id: 1,
        nome: "Rex",                    // MUDEM PARA NOME DO GRUPO
        especie: "cachorro",              // MUDEM A ESP√âCIE
        idade: 3,                         // MUDEM A IDADE
        peso: 15.5,                       // MUDEM O PESO
        vacinado: true                    // ESCOLHAM: true OU false
    };
    const animal2: Animal = {
        id: 2,
        nome: "Mimi",                     // MUDEM PARA NOME DO GRUPO  
        especie: "gato",                  //MUDAM A ESP√âCIE
        idade: 2,                         // MUDEM A IDADE
        peso: 4.2,                        // MUDEM O PESO
        vacinado: false                   // ESCOLHAM: true OU false
    };
    resultado.innerHTML = `
        <div class="animal-card">
            <h3>üêï ${animal1.nome}</h3>
            <p><strong>Especie:</strong> ${animal1.especie}</p>
            <p><strong>Idade:</strong> ${animal1.idade} anos</p>
            <p><strong>Peso:</strong> ${animal1.peso} kg</p>
         <p><strong>Vacinado:</strong> ${animal1.vacinado ? '‚úî Sim' : '‚úñ N√£o'}</p>
        </div>
        <div class="animal-card">
            <h3>üêà ${animal2.nome}</h3>
            <p><strong>Especie:</strong> ${animal2.especie}</p>
            <p><strong>Idade:</strong> ${animal2.idade} anos</p>
            <p><strong>Peso:</strong> ${animal2.peso} kg</p>
          <p><strong>Vacinado:</strong> ${animal2.vacinado ? '‚úî Sim' : '‚úñ N√£o'}</p>  
        </div>
    `;
}
//EXPLICA√á√ÉO: Mostra animais EXEMPLO do seu petshop!
//BOT√ÉO 3: TESTAR NOSSAS FUN√á√ïES
function testarFuncoes(): void {
    const resultado = document.getElementById('resultado');
    if (!resultado) return;
    resultado.innerHTML = `
        <div class="animal-card">
            <h3>‚öôÔ∏è Testando Nossas Fun√ß√µes</h3>
            <p>Aguarde 1 segundo para ver os resultados...</p>
        </div>
    `;
    // setTimeout = espera X milissegundos antes de executar
    setTimeout(() => {
        // TESTANDO fun√ß√£o calcular Idade
        const idadeCalculada = calcularIdade(2020); // Animal nascido em 2020
       //TESTANDO fun√ß√£o criarAnimal  
        const novoAnimal = criarAnimal("Bobby", "cachorro", 2, 8.5);      
        //TESTANDO fun√ß√£o agendarServi√ßos
        const servico: Servico = {
            id: 1,
            tipo: 'banho',
            animalId: novoAnimal.id,
            preco: 45.90,
            concluido: false
        };
        const mensagemServico = agendarServico(servico);
        //  MOSTRANDO RESULTADOS NA TELA
        resultado.innerHTML += `
            <div class="animal-card">
                <h4>üìÖ C√°lculo de Idade</h4>
                <p>Animal nascido em 2020 tem <strong>${idadeCalculada} anos</strong> em 2024</p>
            </div>
            <div class="animal-card">
                <h4>üêï Animal Criado</h4>
                <p><strong>Nome:</strong> ${novoAnimal.nome}</p>
                <p><strong>Esp√©cie:</strong> ${novoAnimal.especie}</p>
                <p><strong>Idade:</strong> ${novoAnimal.idade} anos</p>
            </div>
            <div class="animal-card">
                <h4>üìã Servico Agendado</h4>
                <p>${mensagemServico}</p>
            </div>
        `;
    }, 1000); //  Espera 1000ms = 1 segundo
}
// EXPLICA√á√ÉO: Testa TODAS as fun√ß√µes principais juntas!
// BOT√ÉO 4: MOSTRAR ERROS QUE TYPESCRIPT EVITA
function mostrarErros(): void {
    const resultado = document.getElementById('resultado');
    if (!resultado) return;
    resultado.innerHTML = `
        <div class="erro-card">
            <h3>üö® Erros que o TypeScript Previne</h3>
            <p>Estes c√≥digos <strong>N√ÉO COMPILAM</strong> no TypeScript:</p>
        </div>
        <div class="erro-card">
            <h4>‚ùå ERRO 1: Tipo Incorreto</h4>
            <p><code>let idade: number = "5";</code></p>
            <small>üö´ N√£o pode colocar texto em vari√°vel de n√∫mero</small>
            <small>üí° <strong>Problema do Petshop:</strong> "5 anos" vira "51" na soma</small>
        </div>
        <div class="erro-card">
            <h4>‚ùå ERRO 2: Ficha Incompleta</h4>
            <p><code>let animal: Animal = { nome: "Rex" };</code></p>
            <small>üö´ Tem que preencher TODAS as informa√ß√µes do animal</small>
            <small>üí° <strong>Problema do Petshop:</strong> Fichas de animais incompletas</small>
        </div>
        <div class="erro-card">
            <h4>‚ùå ERRO 3: Par√¢metro Errado</h4>
            <p><code>calcularIdade("2020");</code></p>
            <small>üö´ A fun√ß√£o espera n√∫mero, n√£o texto</small>
            <small>üí° <strong>Problema do Petshop:</strong> C√°lculos errados de idade</small>
        </div>
        <div class="animal-card">
            <h4>‚úÖ Vantagem do TypeScript</h4>
            <p>Estes erros s√£o descobertos <strong>ANTES</strong> de executar o c√≥digo!</p>
            <p>No JavaScript normal, o CLIENTE √© que descobriria esses erros! üò±</p>
        </div>
    `;
}
// BOT√ÉO 5: CADASTRAR NOVO ANIMAL
function cadastrarAnimal(): void {
    const resultado = document.getElementById('resultado');
    if (!resultado) return;
    resultado.innerHTML = `
        <div class="animal-card">
            <h3>‚ûï Cadastrando Novo Animal...</h3>
            <p>Aguarde 2 segundos enquanto n√≥s cadastramos...</p>
        </div>
    `;
    // Simula cadastro autom√°tico ap√≥s 2 segundos
    setTimeout(() => {
        //CRIANDO um animal automaticamente
        const novoAnimal = criarAnimal("Luna", "gato", 1, 3.2);
   animais.push(novoAnimal); // Adiciona na lista de animais
        // MOSTRANDO CONFIRMA√á√ÉO NA TELA
        resultado.innerHTML = `
            <div class="animal-card">
                <h3>‚úÖ Animal Cadastrado com Sucesso!</h3>
                <p><strong>Nome:</strong> ${novoAnimal.nome}</p>
                <p><strong>Especie:</strong> ${novoAnimal.especie}</p>
                <p><strong>Idade:</strong> ${novoAnimal.idade} ano</p>
                <p><strong>Peso:</strong> ${novoAnimal.peso} kg</p>
                <p><strong>ID:</strong> ${novoAnimal.id}</p>
                <p><strong>Vacinado:</strong> ${novoAnimal.vacinado ? '‚úÖ Sim' : '‚ùå N√£o'}</p>
                <small>‚ú® Total de animais cadastrados: ${animais.length}</small>
            </div>
        `;
    }, 2000); // Espera 2000ms = 2 segundos
}
// EXPLICA√á√ÉO: Demonstra como cadastrar animais no sistema!
// OP√á√ÉO E: FUN√á√ïES EXTRAS PARA BOT√ïES (ESCOLHAM 1):
// FUN√á√ÉO para mostrar servi√ßos agendados
function mostrarServico(): void {
    const resultado = document.getElementById('resultado');
    if (!resultado) return;  
   let html = '<div class="animal-card"><h3>üìã Servico Agendado</h3>'; 
    servico.forEach(servico => {
        html += `<p>${servico.tipo} - R$ ${servico.preco} - ${servico.concluido ? '‚úÖ Concluido' : '‚è≥ Pendente'}</p>`;
    });
        html += `</div>`;
    resultado.innerHTML = html;
}
// FUN√á√ÉO para mostrar estat√≠sticas
function mostrarEstatisticas(): void {
    const resultado = document.getElementById('resultado');
    if (!resultado) return;
    const totalAnimais = animais.length;
    const animaisVacinados = animais.filter(a => a.vacinado).length;
    const totalServico = servi√ßos.length;   
    resultado.innerHTML = `
        <div class="animal-card">
            <h3>üìä Estat√≠sticas do Petshop</h3>
            <p><strong>Total de Animais:</strong> ${totalAnimais}</p>
            <p><strong>Animais Vacinados:</strong> ${animaisVacinados}</p>
            <p><strong>Servi√ßos Agendados:</strong> ${totalServi√ßos}</p>
        </div>
    `;
}
// ==============================================
// 5. MENSAGEM INICIAL - EXECUTADA AO CARREGAR
// ==============================================
// MENSAGENS QUE APARECEM NO CONSOLE DO NAVEGADOR
console.log("üöÄ Sistema PetShop carregado com sucesso!");
console.log("üêæ Desenvolvido com TypeScript para evitar erros!");
console.log("üí° Dica: Abra o Console (F12) para ver mensagens!");
console.log("üëâ Clique nos bot√µes para testar as funcionalidades!");
// EXPLICA√á√ÉO: Estas mensagens ajudam no desenvolvimento e teste!
// ‚ùå ERRO COMUM: Esquecer de fechar chaves ou par√™nteses
interface Animal {
    id: number
    // FALTA: } ‚Üê isso causa erro!
// ‚úÖ SOLU√á√ÉO: Verificar se todas as { } e ( ) est√£o fechadas
// ‚ùå ERRO COMUM: V√≠rgulas faltando
const animal = {
    id: 1
    nome: "Rex" // FALTA: , ‚Üê depois do 1
// ‚úÖ SOLU√á√ÉO: Verificar v√≠rgulas entre propriedades
// ‚ùå ERRO COMUM: Tipos incompat√≠veis  
let idade: number = "5"; // ERRO! string em number
// ‚úÖ SOLU√á√ÉO: Usar tipos compat√≠veis: let idade: number = 5;
